import { expect, test } from "@playwright/test";
import { loginAs } from "../helpers/loginHelper"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏–Ω–∞

const baseUrl = "https://intranet-tourism-rama-production.up.railway.app";

test.describe("Community Management", () => {
    // Scenario: View Community Groups
    test("User can automatically log in and view community groups", async ({ page }) => {
        await loginAs(page, "user");

        // –ü–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–æ–±—â–µ—Å—Ç–≤
        await page.goto(`${baseUrl}/community`);

        await page.waitForLoadState("domcontentloaded");

        await expect(page).toHaveURL(`${baseUrl}/community`);

        const communityItems = page.locator(".staff-member-card");
        await page.waitForSelector(".staff-member-card");

        const count = await communityItems.count();
        expect(count).toBeGreaterThan(0);

        console.log(`Test passed: Found ${count} community items`);
    });

    test("Member can create a public community group", async ({ page }) => {
        await loginAs(page, "member");

        await page.goto(`${baseUrl}/community`);
        await page.waitForLoadState("domcontentloaded");

        await expect(page).toHaveURL(`${baseUrl}/community`);

        const createCommunityButton = page.locator("button:text('Community')");
        await createCommunityButton.click();

        const groupNameInput = page.locator("input[placeholder='Community name']");
        const groupDescriptionInput = page.locator("input[placeholder='Description']");
        const groupTypeDropdown = page.locator("select");
        const createButton = page.locator("button:text('Create')");

        await expect(groupNameInput).toBeVisible();
        await expect(groupDescriptionInput).toBeVisible();
        await expect(groupTypeDropdown).toBeVisible();
        await expect(createButton).toBeVisible();

        await groupNameInput.fill("testmember");

        await groupDescriptionInput.fill("testmember description");

        await groupTypeDropdown.selectOption({ label: "Public" });

        await createButton.click();

        await page.waitForLoadState("networkidle");

        const newGroup = page.locator(".staff-member-card:has-text('testmember1')");

        console.log("Test passed: Group 'testmember' created and found in the list.");
    });

    // Scenario: Member logs in, navigates to community page, and visits a specific group
    test("Member logs in, navigates to community page, and visits 'jij' group", async ({ page }) => {
        await loginAs(page, "member");

        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        await page.goto(`${baseUrl}/community`);
        await page.waitForLoadState("domcontentloaded");

        // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        await expect(page).toHaveURL(`${baseUrl}/community`);

        // –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤
        const communityItems = page.locator(".staff-member-card");
        await page.waitForSelector(".staff-member-card");

        const count = await communityItems.count();
        expect(count).toBeGreaterThan(0);

        // –ò—â–µ–º —Å—Å—ã–ª–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º 'jij'
        const jijGroupLink = page.locator(".staff-member-card:has-text('jij') a");
        await expect(jijGroupLink).toBeVisible();

        // –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ –ø–æ 'jij'
        await Promise.all([
            page.waitForNavigation({ waitUntil: "networkidle" }),
            jijGroupLink.click(),
        ]);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å communityId (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å URL)
        await expect(page).toHaveURL(/\/communityInner\?communityId=\d+/);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º 'jij' –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const groupHeader = page.locator("h1:has-text('jij')");
        await expect(groupHeader).toBeVisible();

        console.log("Test passed: Successfully navigated to 'jij' community group page.");
    });

    // Scenario: Logged-in member joins the group, writes, and publishes a post
    test("Logged-in member joins the group, writes, and publishes a post", async ({ page }) => {
        // –®–∞–≥ 1: –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫
        await loginAs(page, "member");

        // –®–∞–≥ 2: –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥—Ä—É–ø–ø—ã "testmember"
        await page.goto(`${baseUrl}/communityInner?communityId=26`);
        await page.waitForLoadState("domcontentloaded");

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≥—Ä—É–ø–ø—ã "testmember"
        await expect(page).toHaveURL(/\/communityInner\?communityId=26/);

        // –ù–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "Join" –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–µ–µ
        const joinButton = page.locator("button:text('Join')");

        // –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –∂–¥–∞—Ç—å, –ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è
        await Promise.all([
            page.waitForLoadState('networkidle'), // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
            joinButton.click(), // –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "Join"
        ]);

        // –®–∞–≥ 3: –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –¥–ª—è –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ
        const postInput = page.locator("textarea[placeholder='Share Your Thoughts...']"); // –õ–æ–∫–∞—Ç–æ—Ä –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø–æ—Å—Ç–∞
        await postInput.fill("This is a test post2"); // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞

        // –®–∞–≥ 4: –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "Publish"
        const publishButton = page.locator('img[alt="SEND"]');
        await publishButton.click(); // –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É

        // –®–∞–≥ 5: –ü–æ–¥–æ–∂–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
        await page.waitForLoadState('networkidle'); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

        // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ—Å—Ç –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç–æ–≤
        const newPost = page.locator(".post-content:has-text('This is a test post')"); // –õ–æ–∫–∞—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
        await expect(newPost).toBeVisible(); // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤–∏–¥–µ–Ω

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        console.log("Test passed: User joined the group, wrote, and published a post successfully.");
    });

    // Scenario: Logged-in member writes and publishes a post with an emoji
    test("Logged-in member writes and publishes a post with an emoji via Emoji Picker", async ({ page }) => {
        // –®–∞–≥ 1: –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫
        await loginAs(page, "member");

        // –®–∞–≥ 2: –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥—Ä—É–ø–ø—ã "testmember"
        await page.goto(`${baseUrl}/communityInner?communityId=26`);
        await page.waitForLoadState("domcontentloaded");

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≥—Ä—É–ø–ø—ã "testmember"
        await expect(page).toHaveURL(/\/communityInner\?communityId=26/);

        // –®–∞–≥ 3: –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –¥–ª—è –ø–æ—Å—Ç–∞
        const postInput = page.locator("textarea[placeholder='Share Your Thoughts...']");
        const postContent = "This is a test post with an emoji";
        await postInput.fill(postContent);

        // –®–∞–≥ 4: –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å —ç–º–æ–¥–∑–∏
        const emojiButton = page.locator('img[alt="Emoji Icon"]');
        await emojiButton.click();

        // –®–∞–≥ 5: –í—ã–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "grinning face" üòÄ)
        const grinningEmoji = page.locator('img[alt="grinning"]'); // –õ–æ–∫–∞—Ç–æ—Ä –¥–ª—è —ç–º–æ–¥–∑–∏ "grinning"
        await grinningEmoji.click();

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–ª–µ –¥–ª—è –ø–æ—Å—Ç–∞
        await expect(postInput).toHaveValue(`${postContent}üòÄ`);

        // –®–∞–≥ 6: –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "Publish"
        const publishButton = page.locator('img[alt="SEND"]');
        await publishButton.click();

        // –®–∞–≥ 7: –ü–æ–¥–æ–∂–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
        await page.waitForLoadState('networkidle');

        // –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ—Å—Ç —Å —ç–º–æ–¥–∑–∏ –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç–æ–≤
        const newPost = page.locator(`.post-content:has-text("${postContent}üòÄ")`);
        await expect(newPost).toBeVisible();

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        console.log(`Test passed: User successfully published a post with an emoji: "${postContent}üòÄ".`);
    });


    // Scenario: Logged-in member creates a poll with any title
    test("Logged-in member creates a poll with any title", async ({ page }) => {
        // –®–∞–≥ 1: –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫
        await loginAs(page, "member");

        // –®–∞–≥ 2: –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥—Ä—É–ø–ø—ã "testmember"
        await page.goto(`${baseUrl}/communityInner?communityId=26`);
        await page.waitForLoadState("domcontentloaded");

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≥—Ä—É–ø–ø—ã "testmember"
        await expect(page).toHaveURL(/\/communityInner\?communityId=26/);

        // –®–∞–≥ 3: –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "Create Poll"
        const createPollButton = page.locator("img[alt=\"Poll Icon\"]");
        await createPollButton.click();

        // –®–∞–≥ 4: –í–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–∞
        const pollTitleInput = page.locator("textarea[placeholder='Type something...']");
        await pollTitleInput.fill("Test Poll Title");

        // –®–∞–≥ 5: –í–≤–µ—Å—Ç–∏ –æ–ø—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞
        const option1Input = page.locator("input[value=\"Option 1\"]");
        const option2Input = page.locator("input[value=\"Option 2\"]");
        await option1Input.fill("Option 1");
        await option2Input.fill("Option 2");

        // –®–∞–≥ 6: –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "Create Poll" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
        const submitPollButton = page.locator("button:text('Post poll')");
        await submitPollButton.click();

        // –®–∞–≥ 7: –ü–æ–¥–æ–∂–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
        await page.waitForLoadState('networkidle');

        // –®–∞–≥ 8: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "Test Poll Title" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –æ–ø—Ä–æ—Å–æ–≤
        const newPoll = page.locator("article:has-text('Test Poll Title')");
        await expect(newPoll).toBeVisible();

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        console.log(`Test passed: Poll "Test Poll Title" successfully created and visible.`);
    });


    // Scenario: Logged-in member adds an additional option to an existing poll
    test("Logged-in member creates a poll and adds an additional option", async ({ page }) => {
        // –®–∞–≥ 1: –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫
        await loginAs(page, "member");

        // –®–∞–≥ 2: –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥—Ä—É–ø–ø—ã "testmember"
        await page.goto(`${baseUrl}/communityInner?communityId=37`);
        await page.waitForLoadState("domcontentloaded");

        // –®–∞–≥ 3: –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "Create Poll"
        const createPollButton = page.locator('img[alt="Poll Icon"]');
        await createPollButton.click();

        // –®–∞–≥ 4: –í–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–∞
        const pollTitleInput = page.locator("textarea[placeholder='Type something...']");
        await pollTitleInput.fill("Test Poll Title");

        // –®–∞–≥ 5: –í–≤–µ—Å—Ç–∏ –æ–ø—Ü–∏–∏ –æ–ø—Ä–æ—Å–∞
        const option1Input = page.locator("input[value='Option 1']");
        await option1Input.fill("Option 1");

        const option2Input = page.locator("input[value='Option 2']");
        await option2Input.fill("Option 2");

        // –®–∞–≥ 6: –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "Add Option"
        const addOptionButton = page.locator('.my-auto:has-text("Add option")')
        await addOptionButton.click();

        // –®–∞–≥ 7: –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç "Option 3"
        const newOptionInput = page.locator("input[value='Option 3']");
        await newOptionInput.fill("Option 3");

        // –®–∞–≥ 8: –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "Post poll"
        const saveOptionButton = page.locator('button:text("Post poll")');
        await saveOptionButton.click();

        // –®–∞–≥ 9: –ü–æ–¥–æ–∂–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—Ü–∏–∏
        await page.waitForLoadState('networkidle');

        // –®–∞–≥ 10: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø—Ü–∏–∏ "Option 1", "Option 2" –∏ "Option 3"
        const option1 = page.locator("article:has-text('Option 1')");
        const option2 = page.locator("article:has-text('Option 2')");
        const option3 = page.locator("article:has-text('Option 3')");

        await expect(option1).toBeVisible();
        await expect(option2).toBeVisible();
        await expect(option3).toBeVisible();

        console.log('Test passed: Poll "Test Poll Title" now contains "Option 1", "Option 2", and "Option 3".');
    });

});
